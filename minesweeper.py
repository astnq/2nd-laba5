import tkinter as tk
from tkinter import messagebox
import random

class Minesweeper:
    def __init__(self, master, width=10, height=10, mines=10, random_after_first_click=True):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        self.master = master
        self.width = width
        self.height = height
        self.mines = mines
        self.random_after_first_click = random_after_first_click

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Å—Ç—ã—Ö —Å–ª–æ–≤–∞—Ä–µ–π –∏ –º–Ω–æ–∂–µ—Å—Ç–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏–≥—Ä—ã
        self.buttons = {}
        self.revealed = set()
        self.flags = set()
        self.mine_positions = set()
        self.first_click = True  # –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –º–∏–Ω—ã —Ä–∞–∑–º–µ—â–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–∫–∞
        self.mines_steped_on = 0  # –°—á—ë—Ç—á–∏–∫ —Ç–æ–≥–æ, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –∏–≥—Ä–æ–∫ –Ω–∞—Å—Ç—É–ø–∏–ª –Ω–∞ –º–∏–Ω—É

        self.create_widgets()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏–≥—Ä—ã

    def create_widgets(self):
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ç–∫–∏ –∏–≥—Ä—ã –∏ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        self.grid_frame = tk.Frame(self.master)
        self.grid_frame.pack(padx=20, pady=20)

        self.restart_button = tk.Button(self.master, text="–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", command=self.restart_game, relief="raised", width=12, height=2, bg="#4CAF50", fg="white", font=("Arial", 12))
        self.restart_button.pack(pady=10)

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–π —è—á–µ–π–∫–∏ –≤ —Å–µ—Ç–∫–µ
        for y in range(self.height):
            for x in range(self.width):
                button = tk.Button(
                    self.grid_frame,
                    width=4,
                    height=2,
                    command=lambda x=x, y=y: self.reveal(x, y),  # –û—Ç–∫—Ä—ã—Ç—å —è—á–µ–π–∫—É –ø—Ä–∏ –∫–ª–∏–∫–µ
                    font=("Arial", 12),
                    bg="#f0f0f0",  # –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                )
                button.bind('<Button-3>', lambda event, x=x, y=y: self.toggle_flag(x, y))  # –ü—Ä–∞–≤—ã–π –∫–ª–∏–∫ –¥–ª—è —Ñ–ª–∞–∂–∫–∞
                button.grid(row=y, column=x, padx=2, pady=2)
                self.buttons[(x, y)] = button  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ —Å–ª–æ–≤–∞—Ä—å

    def place_mines(self, first_click_x=None, first_click_y=None):
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –º–∏–Ω —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –Ω–∞ –ø–æ–ª–µ, –∏—Å–∫–ª—é—á–∞—è –∫–ª–µ—Ç–∫—É —Å –ø–µ—Ä–≤—ã–º –∫–ª–∏–∫–æ–º
        while len(self.mine_positions) < self.mines:
            x, y = random.randint(0, self.width - 1), random.randint(0, self.height - 1)
            if (x, y) != (first_click_x, first_click_y):  # –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –ø–µ—Ä–≤–∞—è –∫–ª–µ—Ç–∫–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∏–Ω–æ–π
                self.mine_positions.add((x, y))

    def reveal(self, x, y):
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–ª–µ—Ç–∫–∏
        if self.first_click and self.random_after_first_click:
            self.place_mines(x, y)  # –†–∞–∑–º–µ—â–∞–µ–º –º–∏–Ω—ã –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–∫–∞
            self.first_click = False

        if (x, y) in self.flags or (x, y) in self.revealed:
            return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –∫–ª–µ—Ç–∫–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞ –∏–ª–∏ –ø–æ–º–µ—á–µ–Ω–∞ —Ñ–ª–∞–∂–∫–æ–º

        if (x, y) in self.mine_positions:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏–π –Ω–∞ –º–∏–Ω—ã
            self.mines_steped_on += 1
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –¥–∞—ë–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É
            self.buttons[(x, y)]['text'] = '*'
            self.buttons[(x, y)]['bg'] = 'red'  # –¶–≤–µ—Ç –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–æ–π –º–∏–Ω—ã
            messagebox.showinfo("–ú–∏–Ω–∞!", f"–í—ã –Ω–∞—Å—Ç—É–ø–∏–ª–∏ –Ω–∞ {self.mines_steped_on} –∏–∑ {self.mines} –º–∏–Ω!")
        else:
            self.expose(x, y)  # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø—É—Å—Ç—É—é –∫–ª–µ—Ç–∫—É

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –º–∏–Ω—ã –ø–æ–º–µ—á–µ–Ω—ã —Ñ–ª–∞–∂–∫–∞–º–∏
        if len(self.flags) == self.mines:
            self.game_over(False)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—Ä—ã–ª –ª–∏ –∏–≥—Ä–æ–∫ –≤—Å–µ –∫–ª–µ—Ç–∫–∏ –±–µ–∑ –º–∏–Ω
        if len(self.revealed) == self.width * self.height - self.mines:
            self.game_over(True)

    def expose(self, x, y):
        # –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–ª–µ—Ç–∫–∏ –∏ —Å–æ—Å–µ–¥–Ω–∏—Ö –∫–ª–µ—Ç–æ–∫, –µ—Å–ª–∏ —Ä—è–¥–æ–º –Ω–µ—Ç –º–∏–Ω
        if (x, y) in self.revealed or not self.in_bounds(x, y):
            return

        self.revealed.add((x, y))
        adjacent_mines = self.count_adjacent_mines(x, y)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ—Å–µ–¥–Ω–∏—Ö –º–∏–Ω
        self.buttons[(x, y)]['text'] = str(adjacent_mines) if adjacent_mines > 0 else ''
        self.buttons[(x, y)]['bg'] = '#D3D3D3'  # –¶–≤–µ—Ç –¥–ª—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö (–Ω–µ –º–∏–Ω–Ω—ã—Ö) –∫–ª–µ—Ç–æ–∫

        # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Å–µ–¥–Ω–∏—Ö –º–∏–Ω, —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ –∫–ª–µ—Ç–∫–∏
        if adjacent_mines == 0:
            for dx in [-1, 0, 1]:
                for dy in [-1, 0, 1]:
                    if dx != 0 or dy != 0:
                        self.expose(x + dx, y + dy)

    def toggle_flag(self, x, y):
        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ñ–ª–∞–∂–∫–∞ –Ω–∞ –∫–ª–µ—Ç–∫–µ (–ø—Ä–∞–≤—ã–π –∫–ª–∏–∫)
        if (x, y) in self.revealed:
            return  # –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ñ–ª–∞–∂–æ–∫ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç—É—é –∫–ª–µ—Ç–∫—É

        if (x, y) in self.flags:
            self.buttons[(x, y)]['text'] = ''
            self.buttons[(x, y)]['bg'] = "#f0f0f0"  # –°–±—Ä–æ—Å —Ü–≤–µ—Ç–∞, –µ—Å–ª–∏ —Ñ–ª–∞–∂–æ–∫ —Å–Ω—è—Ç
            self.flags.remove((x, y))
        else:
            self.buttons[(x, y)]['text'] = 'üö©'
            self.buttons[(x, y)]['bg'] = "#FFEB3B"  # –¶–≤–µ—Ç –¥–ª—è –∫–ª–µ—Ç–æ–∫ —Å —Ñ–ª–∞–∂–∫–æ–º
            self.flags.add((x, y))

    def count_adjacent_mines(self, x, y):
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω, —Å–æ—Å–µ–¥—Å—Ç–≤—É—é—â–∏—Ö —Å –¥–∞–Ω–Ω–æ–π –∫–ª–µ—Ç–∫–æ–π
        return sum((nx, ny) in self.mine_positions
                   for nx in range(x - 1, x + 2)
                   for ny in range(y - 1, y + 2)
                   if self.in_bounds(nx, ny))

    def in_bounds(self, x, y):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∫–ª–µ—Ç–∫–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
        return 0 <= x < self.width and 0 <= y < self.height

    def game_over(self, won):
        # –û–∫–æ–Ω—á–∞–Ω–∏–µ –∏–≥—Ä—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –º–∏–Ω—ã
        for (x, y) in self.mine_positions:
            self.buttons[(x, y)]['text'] = '*'
            self.buttons[(x, y)]['bg'] = 'red'

        found_mines = len(self.flags & self.mine_positions)

        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–±–µ–¥–µ (–±–µ–∑ —Å—á—ë—Ç—á–∏–∫–∞ "–Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏–π –Ω–∞ –º–∏–Ω—É", —Ç–æ–ª—å–∫–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –º–∏–Ω—ã)
        if won:
            msg = ("–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, "
                "–í—ã –Ω–∞—Å—Ç—É–ø–∏–ª–∏ –Ω–∞ {} –º–∏–Ω(—ã). ".format(self.mines_steped_on, found_mines, self.mines))
        else:
            # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–∏–≥—Ä—ã—à–µ —Å —É—á—ë—Ç–æ–º —Å—á—ë—Ç—á–∏–∫–∞ "–Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏–π –Ω–∞ –º–∏–Ω—É"
            msg = ("–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! –í—ã –Ω–∞—Å—Ç—É–ø–∏–ª–∏ –Ω–∞ {} –º–∏–Ω(—ã). ".format(self.mines_steped_on, found_mines, self.mines))

        messagebox.showinfo("–ö–æ–Ω–µ—Ü –∏–≥—Ä—ã", msg)

    def restart_game(self):
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã
        self.master.destroy()
        start_game(self.width, self.height, self.mines, self.random_after_first_click)

def start_game(width, height, mines, random_after_first_click):
    # –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
    root = tk.Tk()
    root.title("–°–∞–ø–µ—Ä")
    app = Minesweeper(root, width, height, mines, random_after_first_click)
    root.mainloop()

def main_menu():
    
    menu_root = tk.Tk()  # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    menu_root.title("–°–∞–ø–µ—Ä - –ú–µ–Ω—é")  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞

    menu_root.geometry('400x350')  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
    menu_root.config(bg="#f0f0f0")  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π —Ü–≤–µ—Ç –æ–∫–Ω–∞

    
    title_label = tk.Label(menu_root, text="–°–∞–ø–µ—Ä", bg="#f0f0f0", font=("Arial", 24, "bold"))
    title_label.pack(pady=20)  # –†–∞–∑–º–µ—â–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –æ–∫–Ω–µ —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏


    tk.Label(menu_root, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å–µ—Ç–∫–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω", bg="#f0f0f0", font=("Arial", 12)).pack(pady=10)

    tk.Label(menu_root, text="–®–∏—Ä–∏–Ω–∞:", bg="#f0f0f0", font=("Arial", 12)).pack()  # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ "–®–∏—Ä–∏–Ω–∞"
    width_entry = tk.Entry(menu_root, font=("Arial", 12))  # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏—è —à–∏—Ä–∏–Ω—ã
    width_entry.pack()  # –†–∞–∑–º–µ—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
    width_entry.insert(0, '10')  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (10)

    tk.Label(menu_root, text="–í—ã—Å–æ—Ç–∞:", bg="#f0f0f0", font=("Arial", 12)).pack()  # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ "–í—ã—Å–æ—Ç–∞"
    height_entry = tk.Entry(menu_root, font=("Arial", 12))  # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏—è –≤—ã—Å–æ—Ç—ã
    height_entry.pack()  # –†–∞–∑–º–µ—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
    height_entry.insert(0, '10')  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (10)

    tk.Label(menu_root, text="–ú–∏–Ω—ã:", bg="#f0f0f0", font=("Arial", 12)).pack()  # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ "–ú–∏–Ω—ã"
    mines_entry = tk.Entry(menu_root, font=("Arial", 12))  # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∏–Ω
    mines_entry.pack()  # –†–∞–∑–º–µ—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
    mines_entry.insert(0, '10')  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (10)

    random_check = tk.BooleanVar()  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞
    random_check.set(True)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–∞–∫ True (—Ä–∞–Ω–¥–æ–º–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ)

    def start_from_menu():
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
        width = int(width_entry.get())  # –®–∏—Ä–∏–Ω–∞ –ø–æ–ª—è
        height = int(height_entry.get())  # –í—ã—Å–æ—Ç–∞ –ø–æ–ª—è
        mines = int(mines_entry.get())  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω
        random_after_first_click = random_check.get()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞
        menu_root.destroy()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        start_game(width, height, mines, random_after_first_click)  # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏

    start_button = tk.Button(menu_root, text="–ù–∞—á–∞—Ç—å –∏–≥—Ä—É", command=start_from_menu, relief="raised", width=15, height=2, bg="#4CAF50", fg="white", font=("Arial", 14, "bold"))
    start_button.pack(pady=20)  # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ —ç–∫—Ä–∞–Ω–µ

    menu_root.mainloop()  # –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏–≥—Ä—ã

