import tkinter as tk
from tkinter import messagebox
import random


class Minesweeper:
    def __init__(self, master, width=10, height=10, mines=10):
        self.master = master
        self.width = width
        self.height = height
        self.mines = mines

        # –ò–≥—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–Ω–æ–ø–æ–∫, —Ä–∞—Å–∫—Ä—ã—Ç—ã—Ö —è—á–µ–µ–∫, —Ñ–ª–∞–≥–æ–≤ –∏ –ø–æ–∑–∏—Ü–∏–π –º–∏–Ω
        self.buttons = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∫–Ω–æ–ø–æ–∫
        self.revealed = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç—ã—Ö —è—á–µ–µ–∫
        self.flags = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —Ñ–ª–∞–≥–æ–≤
        self.mine_positions = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–∑–∏—Ü–∏–π –º–∏–Ω
        self.first_click = True  # –§–ª–∞–≥, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∏–π, —á—Ç–æ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∫–ª–∏–∫
        self.correct_flags = 0  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–ª–∞–≥–æ–≤
        self.mines_stepped_on = 0  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Å—Ç—É–ø–∏–ª –∏–≥—Ä–æ–∫
        self.flag_mode = False  # –†–µ–∂–∏–º —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–ª–∞–≥–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–∫–ª—é—á–µ–Ω)

        self.create_widgets()  # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –≤–∏–¥–∂–µ—Ç–æ–≤ –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞

    def create_widgets(self):
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
        self.grid_frame = tk.Frame(self.master)
        self.grid_frame.pack(padx=20, pady=20)

        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ñ–ª–∞–≥–æ–≤ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        control_frame = tk.Frame(self.master)
        control_frame.pack(pady=10)

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Ñ–ª–∞–≥–∞
        self.flag_button = tk.Button(
            control_frame,
            text="–†–µ–∂–∏–º –§–ª–∞–≥–∞: –í–´–ö–õ",
            command=self.toggle_flag_mode,
            bg="#FF5733",
            fg="white",
            font=("Arial", 12),
            width=15
        )
        self.flag_button.pack(side=tk.LEFT, padx=5)

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
        self.restart_button = tk.Button(
            control_frame,
            text="–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å",
            command=self.restart_game,
            bg="#4CAF50",
            fg="white",
            font=("Arial", 12),
            width=15
        )
        self.restart_button.pack(side=tk.LEFT, padx=5)

        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫ (–∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ)
        for y in range(self.height):
            for x in range(self.width):
                button = tk.Button(
                    self.grid_frame,
                    width=4,
                    height=2,
                    font=("Arial", 12),
                    command=lambda x=x, y=y: self.reveal(x, y),
                    bg="#f0f0f0"
                )
                # –ü—Ä–∞–≤–∞—è –∫–Ω–æ–ø–∫–∞ –º—ã—à–∏ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–ª–∞–≥–∞
                button.bind('<Button-3>', lambda event, x=x, y=y: self.toggle_flag(x, y))
                button.grid(row=y, column=x, padx=2, pady=2)
                self.buttons[(x, y)] = button  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–Ω–æ–ø–∫—É –≤ —Å–ª–æ–≤–∞—Ä—å

    def toggle_flag_mode(self):
        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ñ–ª–∞–≥–∞
        self.flag_mode = not self.flag_mode
        if self.flag_mode:
            self.flag_button.config(text="–†–µ–∂–∏–º –§–ª–∞–≥–∞: –í–ö–õ", bg="#4CAF50")
        else:
            self.flag_button.config(text="–†–µ–∂–∏–º –§–ª–∞–≥–∞: –í–´–ö–õ", bg="#FF5733")

    def place_mines(self, first_click_x, first_click_y):
        # –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –º–∏–Ω —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º (–Ω–µ –Ω–∞ –ø–µ—Ä–≤–æ–π –Ω–∞–∂–∞—Ç–æ–π —è—á–µ–π–∫–µ)
        while len(self.mine_positions) < self.mines:
            x, y = random.randint(0, self.width - 1), random.randint(0, self.height - 1)
            if (x, y) != (first_click_x, first_click_y) and (x, y) not in self.mine_positions:
                self.mine_positions.add((x, y))  # –î–æ–±–∞–≤–ª—è–µ–º –º–∏–Ω—É –≤ —Å–ª—É—á–∞–π–Ω—É—é –ø–æ–∑–∏—Ü–∏—é

    def reveal(self, x, y):
        # –û—Ç–∫—Ä—ã—Ç–∏–µ —è—á–µ–π–∫–∏
        if self.first_click:
            self.place_mines(x, y)  # –†–∞—Å—Å—Ç–∞–≤–ª—è–µ–º –º–∏–Ω—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∫–ª–∏–∫–µ
            self.first_click = False

        if (x, y) in self.flags or (x, y) in self.revealed:
            return  # –ï—Å–ª–∏ —è—á–µ–π–∫–∞ —É–∂–µ –ø–æ–º–µ—á–µ–Ω–∞ —Ñ–ª–∞–≥–æ–º –∏–ª–∏ —Ä–∞—Å–∫—Ä—ã—Ç–∞, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å

        if self.flag_mode:
            self.toggle_flag(x, y)  # –í —Ä–µ–∂–∏–º–µ —Ñ–ª–∞–≥–∞ –ø—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–ª–∞–≥
            return

        if (x, y) in self.mine_positions:
            # –ò–≥—Ä–æ–∫ –Ω–∞—Å—Ç—É–ø–∏–ª –Ω–∞ –º–∏–Ω—É
            self.mines_stepped_on += 1
            self.buttons[(x, y)]['text'] = 'üí£'
            self.buttons[(x, y)]['bg'] = 'orange'
            self.revealed.add((x, y))  # –î–æ–±–∞–≤–ª—è–µ–º —è—á–µ–π–∫—É –≤ —Ä–∞—Å–∫—Ä—ã—Ç—ã–µ
            self.check_all_mines_stepped()  # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Å—Ç—É–ø–∏–ª –ª–∏ –∏–≥—Ä–æ–∫ –Ω–∞ –≤—Å–µ –º–∏–Ω—ã
            return

        # –Ø—á–µ–π–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–∞, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –µ—ë
        self.expose(x, y)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã
        self.check_win()

    def expose(self, x, y):
        # –†–∞—Å–∫—Ä—ã—Ç–∏–µ —è—á–µ–π–∫–∏ –∏ –µ—ë —Å–æ—Å–µ–¥–µ–π (–µ—Å–ª–∏ –≤–æ–∫—Ä—É–≥ –Ω–µ—Ç –º–∏–Ω)
        if (x, y) in self.revealed or not self.in_bounds(x, y):
            return

        self.revealed.add((x, y))
        adjacent_mines = self.count_adjacent_mines(x, y)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∏ —Ñ–æ–Ω –¥–ª—è —è—á–µ–π–∫–∏
        self.buttons[(x, y)]['text'] = str(adjacent_mines) if adjacent_mines > 0 else ''
        self.buttons[(x, y)]['bg'] = '#D3D3D3'

        if adjacent_mines == 0:
            # –ï—Å–ª–∏ –≤–æ–∫—Ä—É–≥ –Ω–µ—Ç –º–∏–Ω, —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–æ—Å–µ–¥–Ω–∏–µ —è—á–µ–π–∫–∏
            for dx in [-1, 0, 1]:
                for dy in [-1, 0, 1]:
                    if dx != 0 or dy != 0:
                        self.expose(x + dx, y + dy)

    def toggle_flag(self, x, y):
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–ª–∏ —Å–Ω—è—Ç–∏–µ —Ñ–ª–∞–≥–∞
        if (x, y) in self.revealed:
            return  # –ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–ª–∞–≥ –Ω–∞ —Ä–∞—Å–∫—Ä—ã—Ç—É—é —è—á–µ–π–∫—É

        if (x, y) in self.flags:
            self.buttons[(x, y)]['text'] = ''
            self.buttons[(x, y)]['bg'] = "#f0f0f0"
            self.flags.remove((x, y))  # –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–ª–∞–≥–æ–≤
            if (x, y) in self.mine_positions:
                self.correct_flags -= 1
        else:
            self.buttons[(x, y)]['text'] = 'üö©'
            self.buttons[(x, y)]['bg'] = "#FFEB3B"
            self.flags.add((x, y))  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥
            if (x, y) in self.mine_positions:
                self.correct_flags += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–ª–∞–≥–æ–≤

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã
        self.check_win()

    def count_adjacent_mines(self, x, y):
        # –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∏–Ω –≤ —Å–æ—Å–µ–¥–Ω–∏—Ö —è—á–µ–π–∫–∞—Ö
        return sum((nx, ny) in self.mine_positions
                   for nx in range(x - 1, x + 2)
                   for ny in range(y - 1, y + 2)
                   if self.in_bounds(nx, ny))

    def in_bounds(self, x, y):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —è—á–µ–π–∫–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
        return 0 <= x < self.width and 0 <= y < self.height

    def check_win(self):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã: –≤—Å–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —è—á–µ–π–∫–∏ –æ—Ç–∫—Ä—ã—Ç—ã –∏–ª–∏ –≤—Å–µ –º–∏–Ω—ã –ø–æ–º–µ—á–µ–Ω—ã —Ñ–ª–∞–≥–∞–º–∏
        if len(self.revealed) == self.width * self.height - len(self.mine_positions):
            self.game_over(True)  # –ò–≥—Ä–æ–∫ –≤—ã–∏–≥—Ä–∞–ª

    def check_all_mines_stepped(self):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Å—Ç—É–ø–∏–ª –ª–∏ –∏–≥—Ä–æ–∫ –Ω–∞ –≤—Å–µ –º–∏–Ω—ã
        if self.mines_stepped_on == len(self.mine_positions):
            self.game_over(False)  # –ò–≥—Ä–æ–∫ –ø—Ä–æ–∏–≥—Ä–∞–ª

    def game_over(self, won):
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
        for (x, y) in self.mine_positions:
            self.buttons[(x, y)]['text'] = 'üí£'
            self.buttons[(x, y)]['bg'] = 'red'

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤—ã–∏–≥—Ä—ã—à–µ –∏–ª–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ
        msg = "–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! " if won else f"–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! –í—ã –Ω–∞—Å—Ç—É–ø–∏–ª–∏ –Ω–∞ {self.mines_stepped_on} –º–∏–Ω."
        messagebox.showinfo("–ö–æ–Ω–µ—Ü –∏–≥—Ä—ã", msg)

        # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
        for button in self.buttons.values():
            button.config(state=tk.DISABLED)

    def restart_game(self):
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã
        self.master.destroy()  # –ó–∞–∫—Ä—ã—Ç—å —Ç–µ–∫—É—â–µ–µ –æ–∫–Ω–æ
        start_game(self.width, self.height, self.mines)  # –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π –∏–≥—Ä—ã


def start_game(width, height, mines):
    # –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    root = tk.Tk()
    root.title("–°–∞–ø–µ—Ä")
    Minesweeper(root, width, height, mines)
    root.mainloop()


def main_menu():
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –≤—ã–±–æ—Ä–æ–º —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    menu_root = tk.Tk()
    menu_root.title("–°–∞–ø–µ—Ä - –ú–µ–Ω—é")
    menu_root.geometry('400x400')
    menu_root.config(bg="#f0f0f0")

    tk.Label(menu_root, text="–°–∞–ø–µ—Ä", bg="#f0f0f0", font=("Arial", 24, "bold")).pack(pady=20)

    def start_with_difficulty(difficulty):
        # –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é
        if difficulty == 'Easy':
            start_game(8, 8, 10)
        elif difficulty == 'Normal':
            start_game(16, 16, 40)
        elif difficulty == 'Hard':
            start_game(24, 24, 99)

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    tk.Button(menu_root, text="–õ–µ–≥–∫–∏–π", command=lambda: start_with_difficulty('Easy'), bg="#4CAF50", fg="white",
              font=("Arial", 14), width=15).pack(pady=10)
    tk.Button(menu_root, text="–°—Ä–µ–¥–Ω–∏–π", command=lambda: start_with_difficulty('Normal'), bg="#FFC107", fg="black",
              font=("Arial", 14), width=15).pack(pady=10)
    tk.Button(menu_root, text="–°–ª–æ–∂–Ω—ã–π", command=lambda: start_with_difficulty('Hard'), bg="#F44336", fg="white",
              font=("Arial", 14), width=15).pack(pady=10)

    menu_root.mainloop()


main_menu()
