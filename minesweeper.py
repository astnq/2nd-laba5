import tkinter as tk
from tkinter import messagebox
import random

# –ö–ª–∞—Å—Å –¥–ª—è –∏–≥—Ä—ã "–°–∞–ø–µ—Ä"
class Minesweeper:
    def __init__(self, master, width=10, height=10, mines=10):
        self.master = master  # –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
        self.width = width  # –®–∏—Ä–∏–Ω–∞ –ø–æ–ª—è
        self.height = height  # –í—ã—Å–æ—Ç–∞ –ø–æ–ª—è
        self.mines = mines  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω

        # –ò–≥—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.buttons = {}  # –ö–Ω–æ–ø–∫–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —è—á–µ–π–∫–∞–º –ø–æ–ª—è
        self.revealed = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Ä–∞—Å–∫—Ä—ã—Ç—ã—Ö —è—á–µ–µ–∫
        self.flags = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–ª–∞–≥–æ–≤
        self.mine_positions = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π –º–∏–Ω
        self.first_click = True  # –§–ª–∞–≥ –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–∫–∞
        self.correct_flags = 0  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–ª–∞–≥–æ–≤
        self.mines_stepped_on = 0  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏–π –Ω–∞ –º–∏–Ω—É
        self.flags_placed = 0  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–ª–∞–≥–æ–≤

        self.create_widgets()  # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ –Ω–∞ —ç–∫—Ä–∞–Ω–µ

    # –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–∂–µ—Ç–æ–≤ (–∫–Ω–æ–ø–æ–∫) –Ω–∞ —ç–∫—Ä–∞–Ω–µ
    def create_widgets(self):
        self.grid_frame = tk.Frame(self.master)  # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
        self.grid_frame.pack(padx=20, pady=20)

        control_frame = tk.Frame(self.master)  # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞)
        control_frame.pack(pady=10)

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
        self.restart_button = tk.Button(
            control_frame,
            text="–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å",  
            command=self.restart_game,  
            bg="#4CAF50",  
            fg="white", 
            font=("Arial", 12), 
            width=15  
        )
        self.restart_button.pack(side=tk.LEFT, padx=5)

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
        for y in range(self.height):
            for x in range(self.width):
                button = tk.Button(
                    self.grid_frame,
                    width=4,  
                    height=2,  
                    font=("Arial", 12),   
                    command=lambda x=x, y=y: self.reveal(x, y),  
                    bg="#f0f0f0"   
                )
                # –ü—Ä–∞–≤—ã–π –∫–ª–∏–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏/—Å–Ω—è—Ç–∏—è —Ñ–ª–∞–≥–∞
                button.bind('<Button-3>', lambda event, x=x, y=y: self.toggle_flag(x, y))
                button.grid(row=y, column=x, padx=2, pady=2)  # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞ –ø–æ–ª–µ
                self.buttons[(x, y)] = button  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –≤ —Å–ª–æ–≤–∞—Ä—å

    # –ú–µ—Ç–æ–¥ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –º–∏–Ω –Ω–∞ –ø–æ–ª–µ
    def place_mines(self, first_click_x, first_click_y):
        while len(self.mine_positions) < self.mines:
            x, y = random.randint(0, self.width - 1), random.randint(0, self.height - 1)
            # –ú–∏–Ω –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ç–æ–º –º–µ—Å—Ç–µ, –≥–¥–µ –±—ã–ª —Å–¥–µ–ª–∞–Ω –ø–µ—Ä–≤—ã–π –∫–ª–∏–∫
            if (x, y) != (first_click_x, first_click_y) and (x, y) not in self.mine_positions:
                self.mine_positions.add((x, y))  # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –º–∏–Ω—ã

    # –ú–µ—Ç–æ–¥ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è —è—á–µ–π–∫–∏
    def reveal(self, x, y):
        if self.first_click:
            self.place_mines(x, y)  # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –º–∏–Ω –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∫–ª–∏–∫–µ
            self.first_click = False  # –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–∫–∞

        if (x, y) in self.flags or (x, y) in self.revealed:
            return  # –Ø—á–µ–π–∫–∞ —É–∂–µ —Ä–∞—Å–∫—Ä—ã—Ç–∞ –∏–ª–∏ –ø–æ–º–µ—á–µ–Ω–∞ —Ñ–ª–∞–≥–æ–º

        if (x, y) in self.mine_positions:
            self.mines_stepped_on += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏–π –Ω–∞ –º–∏–Ω—É
            self.buttons[(x, y)]['text'] = 'üí£'  # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–∏–Ω—É –Ω–∞ –∫–Ω–æ–ø–∫–µ
            self.buttons[(x, y)]['bg'] = 'orange'  # –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –∫–Ω–æ–ø–∫–∏
            self.revealed.add((x, y))  # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞—Å–∫—Ä—ã—Ç—ã—Ö —è—á–µ–µ–∫
            self.check_all_mines_stepped()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –º–∏–Ω—ã –ø–æ–¥–æ—Ä–≤–∞–Ω—ã
            return

        self.expose(x, y)   
        self.check_win()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∏–≥—Ä—ã—à–∞

    
    def expose(self, x, y):
        if (x, y) in self.revealed or not self.in_bounds(x, y):
            return  # –ï—Å–ª–∏ —è—á–µ–π–∫–∞ —É–∂–µ —Ä–∞—Å–∫—Ä—ã—Ç–∞ –∏–ª–∏ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –ø–æ–ª—è

        self.revealed.add((x, y))  # –î–æ–±–∞–≤–ª—è–µ–º —è—á–µ–π–∫—É –≤ —Ä–∞—Å–∫—Ä—ã—Ç—ã–µ
        adjacent_mines = self.count_adjacent_mines(x, y)  # –°—á–∏—Ç–∞–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ –º–∏–Ω—ã

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Å–µ–¥–Ω–∏—Ö –º–∏–Ω, –µ—Å–ª–∏ –∏—Ö –±–æ–ª—å—à–µ 0
        self.buttons[(x, y)]['text'] = str(adjacent_mines) if adjacent_mines > 0 else ''
        self.buttons[(x, y)]['bg'] = '#D3D3D3'  # –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç —Ñ–æ–Ω–∞

        # –ï—Å–ª–∏ —Å–æ—Å–µ–¥–µ–π –º–∏–Ω –Ω–µ—Ç, —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ —è—á–µ–π–∫–∏
        if adjacent_mines == 0:
            for dx in [-1, 0, 1]:
                for dy in [-1, 0, 1]:
                    if dx != 0 or dy != 0:
                        self.expose(x + dx, y + dy)

    # –ú–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–ª–∞–≥–∞ –Ω–∞ —è—á–µ–π–∫—É
    def toggle_flag(self, x, y):
        if (x, y) in self.revealed:
            return  # –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ñ–ª–∞–≥ –Ω–∞ —Ä–∞—Å–∫—Ä—ã—Ç—É—é —è—á–µ–π–∫—É

        if self.flags_placed >= self.mines:
            messagebox.showwarning("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ", "–í—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ñ–ª–∞–≥–∏!")  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —Ñ–ª–∞–≥–∞–º
            return

        if (x, y) in self.flags:
            self.buttons[(x, y)]['text'] = ''  
            self.buttons[(x, y)]['bg'] = "#f0f0f0"  
            self.flags.remove((x, y))  
            self.flags_placed -= 1  
            if (x, y) in self.mine_positions:
                self.correct_flags -= 1  # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Ñ–ª–∞–≥–æ–≤
        else:
            self.buttons[(x, y)]['text'] = 'üö©'  
            self.buttons[(x, y)]['bg'] = "#FFEB3B"  
            self.flags.add((x, y))  
            self.flags_placed += 1  
            if (x, y) in self.mine_positions:
                self.correct_flags += 1  

        self.check_win()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∏–≥—Ä—ã—à–∞

    # –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å–æ—Å–µ–¥–Ω–∏—Ö –º–∏–Ω
    def count_adjacent_mines(self, x, y):
        return sum((nx, ny) in self.mine_positions
                   for nx in range(x - 1, x + 2)
                   for ny in range(y - 1, y + 2)
                   if self.in_bounds(nx, ny))

    # –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —è—á–µ–π–∫–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ø–æ–ª—è
    def in_bounds(self, x, y):
        return 0 <= x < self.width and 0 <= y < self.height

    # –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –≤—ã–∏–≥—Ä–∞–ª –ª–∏ –∏–≥—Ä–æ–∫
    def check_win(self):
        if len(self.revealed) == self.width * self.height - len(self.mine_positions):
            self.game_over(True)  # –ï—Å–ª–∏ –≤—Å–µ —è—á–µ–π–∫–∏ —Ä–∞—Å–∫—Ä—ã—Ç—ã, –∫—Ä–æ–º–µ –º–∏–Ω
        elif self.correct_flags == self.mines and len(self.flags) == self.mines:
            self.game_over(True)  # –ï—Å–ª–∏ –≤—Å–µ —Ñ–ª–∞–≥–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ

    # –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –≤—Å–µ –ª–∏ –º–∏–Ω—ã –ø–æ–¥–æ—Ä–≤–∞–Ω—ã
    def check_all_mines_stepped(self):
        if self.mines_stepped_on == len(self.mine_positions):
            self.game_over(False)  # –ï—Å–ª–∏ –Ω–∞—Å—Ç—É–ø–∏–ª–∏ –Ω–∞ –≤—Å–µ –º–∏–Ω—ã

    # –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
    def game_over(self, won):
        for (x, y) in self.mine_positions:
            self.buttons[(x, y)]['text'] = 'üí£'  # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Å–µ –º–∏–Ω—ã
            self.buttons[(x, y)]['bg'] = 'red'  # –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –Ω–∞ –∫—Ä–∞—Å–Ω—ã–π

        if won:
            msg = f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! –ù–∞–π–¥–µ–Ω–æ –º–∏–Ω: {self.correct_flags}, –ù–∞—Å—Ç—É–ø–ª–µ–Ω–æ –Ω–∞ –º–∏–Ω: {self.mines_stepped_on}"
        else:
            msg = f"–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! –ù–∞–π–¥–µ–Ω–æ –º–∏–Ω: {self.correct_flags}, –ù–∞—Å—Ç—É–ø–ª–µ–Ω–æ –Ω–∞ –º–∏–Ω: {self.mines_stepped_on}"
        
        messagebox.showinfo("–ö–æ–Ω–µ—Ü –∏–≥—Ä—ã", msg)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã

        # –ë–ª–æ–∫–∏—Ä—É–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
        for button in self.buttons.values():
            button.config(state=tk.DISABLED)

    # –ú–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
    def restart_game(self):
        self.master.destroy()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –æ–∫–Ω–æ
        start_game(self.width, self.height, self.mines)  # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –∏–≥—Ä—ã
def start_game(width, height, mines):
    root = tk.Tk()  # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ
    root.title("–°–∞–ø–µ—Ä") 
    Minesweeper(root, width, height, mines) 
    root.mainloop()  


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def main_menu():
    menu_root = tk.Tk()  # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ –º–µ–Ω—é
    menu_root.title("–°–∞–ø–µ—Ä - –ú–µ–Ω—é") 
    menu_root.geometry('400x400')  
    menu_root.config(bg="#f0f0f0")   

    tk.Label(menu_root, text="–°–∞–ø–µ—Ä", bg="#f0f0f0", font=("Arial", 24, "bold")).pack(pady=20)

    # –ü–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ —à–∏—Ä–∏–Ω—ã, –≤—ã—Å–æ—Ç—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∏–Ω
    tk.Label(menu_root, text="–®–∏—Ä–∏–Ω–∞:", bg="#f0f0f0", font=("Arial", 12)).pack(pady=5)
    width_entry = tk.Entry(menu_root, font=("Arial", 12))
    width_entry.insert(0, "10")  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    width_entry.pack(pady=5)

    tk.Label(menu_root, text="–í—ã—Å–æ—Ç–∞:", bg="#f0f0f0", font=("Arial", 12)).pack(pady=5)
    height_entry = tk.Entry(menu_root, font=("Arial", 12))
    height_entry.insert(0, "10")  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    height_entry.pack(pady=5)

    tk.Label(menu_root, text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω:", bg="#f0f0f0", font=("Arial", 12)).pack(pady=5)
    mines_entry = tk.Entry(menu_root, font=("Arial", 12))
    mines_entry.insert(0, "10")  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    mines_entry.pack(pady=5)

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –∏–≥—Ä—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    def start_game_with_custom_settings():
        try:
            width = int(width_entry.get())  # –ü–æ–ª—É—á–∞–µ–º —à–∏—Ä–∏–Ω—É
            height = int(height_entry.get())  # –ü–æ–ª—É—á–∞–µ–º –≤—ã—Å–æ—Ç—É
            mines = int(mines_entry.get())  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if width <= 0 or height <= 0 or mines <= 0 or mines > width * height:
                raise ValueError

            start_game(width, height, mines)  # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
            menu_root.destroy()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é
        except ValueError:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —à–∏—Ä–∏–Ω—ã, –≤—ã—Å–æ—Ç—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∏–Ω.")

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –∏–≥—Ä—ã
    tk.Button(menu_root, text="–ù–∞—á–∞—Ç—å –∏–≥—Ä—É", command=start_game_with_custom_settings, bg="#4CAF50", fg="white",
              font=("Arial", 14), width=15).pack(pady=20)

    menu_root.mainloop()  # –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –º–µ–Ω—é


main_menu()  # –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
